充值读卡流程

1. 读取芯片号 cCardNo
			if (! TJModule.FoundCard(ref cCardNo))
			{
				returnValue = - 1;
				return returnValue;
			}
		//寻卡
		public static bool FoundCard(ref uint cCardNo)
		{
			bool returnValue = false;
			byte PS3;
            byte PS1 = 0;
            byte Ps = 0;
            byte PS2 = 0;

			int MifareCardType =0;
            byte MifareCardSize = (byte)0;
			int CNo=0;
			int CardNo =0;
			int i;
			
			for (i = 0; i <= 3; i++)
			{
                Ps = Declare.Request(Declare.lDevNo, (byte)0, ref  MifareCardType);
                PS1 = Declare.Anticoll(Declare.lDevNo, (byte)0, ref  CNo);
                PS2 = Declare.Request(Declare.lDevNo, (byte)0, ref  MifareCardType);
                PS3 = Declare.Anticoll(Declare.lDevNo, (byte)0, ref CardNo);
				
				if (Ps != PS2 && PS1 != PS3)
				{
					break;
				}
				if (Ps == 0 && PS1 == 0 && PS2 == 0 && PS3 == 0)
				{
					if (CardNo != CNo)
					{
						returnValue = false;
						return returnValue;
					}
				}
			}
			
			
			for (i = 0; i <= 3; i++)
			{
                Ps = Declare.Request(Declare.lDevNo, (byte)0,ref  MifareCardType);
                PS1 = Declare.Anticoll(Declare.lDevNo, (byte)0, ref  CNo);
                PS2 = Declare.Select_Card(Declare.lDevNo, CNo, ref MifareCardSize);
				if (Ps == 0 && PS1 == 0 && PS2 == 0)
				{
					break;
				}
			}
			if (Ps != 0 || PS1 != 0 || PS2 != 0)
			{
				returnValue = false;
				cCardNo = 0;
				return returnValue;
			}
			cCardNo = 0;
			Declare.CopyMemory(ref cCardNo,ref CNo, 4);
			returnValue = true;
			return returnValue;
		}					
		
2. //读发行区
			
			sCardKey = OtherModule.MakePublishPW(cCardNo); //生成发行区密码 sCardKey
		//生成发行区密码
		public static string MakePublishPW(uint cCardNo)
		{
			string returnValue = string.Empty;
			string sTmp = string.Empty;
			byte[] abTmp = new byte[8];			
			uint cTmp =cCardNo;
           
			Declare.CopyMemory(ref abTmp[0], ref cTmp, 4);
			
			for (int i = 0; i <= 3; i++)
			{
				abTmp[i + 4] = abTmp[i];
			}
			for (int i = 0; i <= 7; i++)
			{
				sTmp = sTmp + Supply00(Conversion.Hex(abTmp[i]), 0, "0", 2);
			}
			returnValue = sTmp.Substring(0, 12);
			
			return returnValue;
		}			
		
3. 加载1扇区密钥
			if (! TJModule.LoadKey(1, 1, sCardKey))
			{
				returnValue = - 1;
				return returnValue;
			}
		//装入密钥
		public static bool LoadKey(int iMode, int SecNo, string sKey)
		{
			bool returnValue = false;
			byte[] abKey = new byte[6];
			int i;
			
			for (i = 0; i <= 5; i++)
			{
				abKey[i] = byte.Parse((sKey.Substring(i * 2 + 1 - 1, 2)),System.Globalization.NumberStyles.HexNumber);
			}
            if (Declare.Load_key(Declare.lDevNo, (byte)iMode, (byte)SecNo, ref abKey[0]) != 0)
			{
				returnValue = false;
			}
			else
			{
				returnValue = true;
			}
			return returnValue;
		}

4.认证1扇区
			if (! TJModule.AuthCard(cCardNo, 1, 1))
			{
				returnValue = - 1;
				return returnValue;
			}			
		//认证
		public static bool AuthCard(uint cCardNo, int AuthMode, int SecNo)
		{
			bool returnValue = false;
			int i;
			byte lDevSt=0;
			
			for (i = 1; i <= 5; i++)
			{
                lDevSt = Declare.Authentication_2(Declare.lDevNo, (byte)AuthMode, (byte)SecNo, (byte)((SecNo + 1) * 4 - 1));
				if (lDevSt == 0)
				{
					break;
				}
				else
				{
					SelectCard(cCardNo);
				}
			}
			
			if (lDevSt != 0)
			{
				returnValue = false;
				return returnValue;
			}
			returnValue = true;
			
			return returnValue;
		}

5. 读取第四扇区数据 
			if (TJModule.ReadData(1, cCardNo, 4, ref CardData))
			{
				iCityNo = Convert.ToInt32(OtherModule.SHex(CardData[0]) + OtherModule.SHex(CardData[1])); //城市代码
				with_1.SerialNo = Convert.ToInt32(OtherModule.SHex(CardData[4]) + OtherModule.SHex(CardData[5]) + OtherModule.SHex(CardData[6]) + OtherModule.SHex(CardData[7]));
				with_1.SerialCity = Convert.ToString(OtherModule.SHex(CardData[0]) + OtherModule.SHex(CardData[1]) + OtherModule.SHex(CardData[2]) + OtherModule.SHex(CardData[3]) + OtherModule.SHex(CardData[4]) + OtherModule.SHex(CardData[5]) + OtherModule.SHex(CardData[6]) + OtherModule.SHex(CardData[7]));
				lOnlyNo = Convert.ToInt32(with_1.SerialNo); //卡流水号
				sCardKey = OtherModule.SHex(CardData[8]) + OtherModule.SHex(CardData[9]) + OtherModule.SHex(CardData[10]) + OtherModule.SHex(CardData[11]);
				with_1.Deposit = Convert.ToInt32(OtherModule.SHex(CardData[14]));
				with_1.UseFlag = CardData[12];
				with_1.CardType = CardData[13];               


			}		
		//读卡
		public static bool ReadData(int AuthMod, uint cCardNo, int iSecNo, ref byte[] data)
		{
			bool returnValue = false;
			int i;
			int lDevSt =0;
			
			for (i = 1; i <= 5; i++)
			{
                lDevSt = Declare.Card_Read(Declare.lDevNo, (byte)iSecNo, ref data[0]);
				if (lDevSt == 0)
				{
					break;
				}
				else
				{
					SelectCard(cCardNo);   //见下****（1）****
					AuthCard(cCardNo, AuthMod, Conversion.Int(iSecNo / 4));    //见下****（2）****
				}
			}
			
			if (lDevSt != 0)
			{
				returnValue = false;
				return returnValue;
			}
			returnValue = true;
			
			return returnValue;
		}			
				
****（1）****				
		//选卡
		public static bool SelectCard(uint cCardNo)
		{
			bool returnValue = false;
			byte PS2=0;
			byte Ps=0;
            //int PS1=0;
            //int PortState;
			int MifareCardType =0;
            byte MifareCardSize = (byte)0;
			int CNo=0;
			int i;

			Declare.CopyMemory(ref CNo, ref cCardNo, 4);
			
			for (i = 0; i <= 3; i++)
			{
                Ps = Declare.Request(Declare.lDevNo, 0,ref  MifareCardType);
                PS2 = Declare.Select_Card(Declare.lDevNo, CNo, ref MifareCardSize);
				if (Ps == 0 && PS2 == 0)
				{
					break;
				}
			}
			if (Ps != 0 || PS2 != 0)
			{
				returnValue = false;
				return returnValue;
			}
			returnValue = true;
			return returnValue;
		}				
**************************				
****（2）****
		//认证
		public static bool AuthCard(uint cCardNo, int AuthMode, int SecNo)
		{
			bool returnValue = false;
			int i;
			byte lDevSt=0;
			
			for (i = 1; i <= 5; i++)
			{
                lDevSt = Declare.Authentication_2(Declare.lDevNo, (byte)AuthMode, (byte)SecNo, (byte)((SecNo + 1) * 4 - 1));
				if (lDevSt == 0)
				{
					break;
				}
				else
				{
					SelectCard(cCardNo);
				}
			}
			
			if (lDevSt != 0)
			{
				returnValue = false;
				return returnValue;
			}
			returnValue = true;
			
			return returnValue;
		}
		******************************************
		
6.			//取各扇区密码
cCardNo 卡芯片号，lOnlyNo 卡流水号，sCardKey发行区密码，iCityNo 城市代码，"0110001110000000" 固定值，1KEYA

返回数组asSecPW 各扇区密钥


			if (! TJModule.GetSecPW(cCardNo, lOnlyNo, sCardKey, iCityNo, "0110001110000000", 1, ref Declare.asSecPW))
			{
				returnValue = - 1;
				return returnValue;
			}
			
		//取各扇区的密码
		public static bool GetSecPW(uint cCardNo, int lOnlyNo, string sAuthKey, int iCityNo, string sSecNo, int iKeyNo, ref string[] SecPW)
		{
			bool returnValue = false;
			//int i;
			int j;
			string sCardNo =string.Empty;
			string sAuthCode;
			string sTmp = string.Empty;
			string sOnlyNo;
			string sCityNo;
			string sCommand;
			string sRetStr=string.Empty ;
			
			//认证MAC
			sCardNo = OtherModule.Supply00(OtherModule.CurToStr(cCardNo), 0, "0", 8);
			sOnlyNo = OtherModule.Supply00(lOnlyNo.ToString(), 0, "0", 8).Substring(4);
			sCityNo = OtherModule.Supply00(iCityNo.ToString(), 0, "0", 4);
			
			//计算MAC码
			sTmp = sCardNo + sOnlyNo + sCityNo;
			sCommand = "0088007" + Convert.ToString(iKeyNo - 1) + "08" + sTmp;
			if (SAMReturnVal(Declare. lDevNo, sCommand, ref sRetStr) != "9000")  //SAMReturnVal见下****（3）****
			{
				returnValue = false;
				return returnValue;
			}
			sAuthCode = sRetStr.Substring(0, 8);
			
			//计算KAYB
			if (sAuthCode == sAuthKey)
			{
				for (j = 0; j <= sSecNo.Length - 1; j++)
				{
					if (Convert.ToDouble(sSecNo.Substring(j + 1 - 1, 1) ) == 1)
					{
						sTmp = sCardNo + sOnlyNo + sAuthCode.Substring(0, 2) + OtherModule.Supply00(j.ToString(), 0, "0", 2);
						sCommand = "0088005" + Convert.ToString(iKeyNo - 1) + "08" + sTmp;
						if (SAMReturnVal(Declare. lDevNo, sCommand, ref sRetStr) != "9000")
						{
							returnValue = false;
							return returnValue;
						}
						SecPW[j] = sRetStr.Substring(0, 12);
					}
				}
			}
			else
			{
				returnValue = false;
				return returnValue;
			}
            ReadSec(SecPW);

			
			returnValue = true;
			return returnValue;
		}

****（3）****		
		//SAM卡取返回值
		public static string SAMReturnVal(int DevNo, string ComArray, ref string ReturnStr)
		{
			string returnValue=string.Empty;
            byte RecLen = (byte)0;
			byte[] RecStr = new byte[201];
			string strtmp=string.Empty;
			int RetVal=0;
			int i;

            RetVal = Declare.SAM_CmdC(DevNo, (byte)(ComArray.Length / 2), ComArray, ref RecLen, ref  RecStr[0]);
			
            if (Conversion.Hex(RetVal) == "9000")
            {
                for (i = 0; i <= RecLen - 1; i++)
                {
                    strtmp = strtmp + ((char)(RecStr[i])).ToString();
                    //String.Chr
                }
                ReturnStr = strtmp;
                Debug.Print("\nSAM  " + ComArray + "   " + strtmp + "  " + Conversion.Hex(RetVal));
            }
            else
            {
				returnValue = Conversion.Hex(RetVal);
				return returnValue;
			}
			
			returnValue = "9000";
			
			return returnValue;
		}	
****************************************					